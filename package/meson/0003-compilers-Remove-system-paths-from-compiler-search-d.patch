From 5440c57a63f81d5d6cdf0cf7a5c5613f766589f0 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan@pnwbakers.com>
Date: Fri, 13 Oct 2023 10:47:51 -0700
Subject: [PATCH] compilers: Remove system paths from compiler search dirs

For some reason GCC sometimes lists /lib and other system locations as
part of its default search path. This shouldn't be necessary, as GCC
shouldn't be installing anything in there, and if we need it other
dependencies will add it. It's a problem because it sometimes prevents
the correct dependency from being found.

Downloaded from
https://github.com/dcbaker/meson/commit/5440c57a63f81d5d6cdf0cf7a5c5613f766589f0

Upstream: https://github.com/mesonbuild/meson/issues/11914#issuecomment-1764880338

Signed-off-by: Bernd Kuhls <bernd@kuhls.net>
---
 mesonbuild/compilers/mixins/gnu.py | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/mesonbuild/compilers/mixins/gnu.py b/mesonbuild/compilers/mixins/gnu.py
index b62435b1931b..622c10cad5d0 100644
--- a/mesonbuild/compilers/mixins/gnu.py
+++ b/mesonbuild/compilers/mixins/gnu.py
@@ -503,6 +503,19 @@ def _split_fetch_real_dirs(self, pathstr: str) -> T.List[str]:
                     pass
         return result
 
+    @staticmethod
+    def __remove_system_dirs(dirs: T.List[str]) -> T.List[str]:
+        """Remove any directories that are not compiler specific
+
+        GCC sometimes reports things like /lib and /usr/lib as a search path.
+
+        :param dirs: a list of paths that the compiler returned
+        :return: a list of paths with common system directories removed
+        """
+        exclude = frozenset({'/lib', '/usr/lib', '/usr/local/lib',
+                             '/lib64', '/usr/lib64', '/usr/local/lib64'})
+        return [d for d in dirs if d not in exclude]
+
     def get_compiler_dirs(self, env: 'Environment', name: str) -> T.List[str]:
         '''
         Get dirs from the compiler, either `libraries:` or `programs:`
@@ -510,7 +523,7 @@ def get_compiler_dirs(self, env: 'Environment', name: str) -> T.List[str]:
         stdo = self._get_search_dirs(env)
         for line in stdo.split('\n'):
             if line.startswith(name + ':'):
-                return self._split_fetch_real_dirs(line.split('=', 1)[1])
+                return self.__remove_system_dirs(self._split_fetch_real_dirs(line.split('=', 1)[1]))
         return []
 
     def get_lto_compile_args(self, *, threads: int = 0, mode: str = 'default') -> T.List[str]:
